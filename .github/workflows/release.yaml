---
name: Release to Docker and PyPI
on:
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RELEASE_TAG: ${{ github.event.release.tag_name }}

jobs:
  checkout-test-and-wheel:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -Ur requirements-dev.txt
      - name: Prepare cloudformation-seed package
        run: |
          python setup.py develop
      - name: Lint with flake8
        run: |
          flake8
      - name: Run tests
        run: |
          python -m unittest -v
      - name: Install wheel and twine
        run: |
          python -m pip install --upgrade twine wheel
      - name: Set version number
        run: |
          echo "VERSION='$RELEASE_TAG'" >./cloudformation_seed/version.py
      - name: Build wheel and source
        run: |
          python setup.py sdist
          python setup.py bdist_wheel
      - name: Upload to PyPI
        env:
          TWINE_NON_INTERACTIVE: "true"
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          twine upload dist/*
  docker-build-and-publish:
    runs-on: ubuntu-latest
    needs: checkout-test-and-wheel
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            CFSEED_VERSION=${{ env.RELEASE_TAG }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
